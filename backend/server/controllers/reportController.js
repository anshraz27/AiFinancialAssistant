const Transaction = require("../models/Transaction");
const Investment = require("../models/Investment");
const PDFDocument = require("pdfkit");

const getMonthlyReport = async (req, res) => {
  // ... (your existing code, unchanged)
};

// âœ… New function for PDF download
const generateMonthlyReport = async (req, res) => {
  try {
    const { month } = req.query;
    if (!month) return res.status(400).json({ message: "Month required" });

    // Call existing logic for data
    req.query.month = month;
    const userId = req.user.id;

    // Fetch same data
    const startDate = new Date(`${month}-01T00:00:00Z`);
    const endDate = new Date(
      startDate.getFullYear(),
      startDate.getMonth() + 1,
      0,
      23,
      59,
      59
    );
    const transactions = await Transaction.find({
      user: userId,
      date: { $gte: startDate, $lte: endDate },
    });
    const investments = await Investment.find({
      user: userId,
      date: { $gte: startDate, $lte: endDate },
    });

    const totalIncome = transactions
      .filter((t) => t.type === "income")
      .reduce((sum, t) => sum + t.amount, 0);
    const totalExpenses = transactions
      .filter((t) => t.type === "expense")
      .reduce((sum, t) => sum + t.amount, 0);
    const totalInvestments = investments.reduce((sum, i) => sum + i.amount, 0);
    const netSavings = totalIncome - totalExpenses - totalInvestments;

    // PDF Creation
    const doc = new PDFDocument({ margin: 50 });
    res.setHeader("Content-Type", "application/pdf");
    res.setHeader(
      "Content-Disposition",
      `attachment; filename=report-${month}.pdf`
    );
    doc.pipe(res);

    doc.fontSize(20).text(`Financial Report - ${month}`, { align: "center" });
    doc.moveDown(2);

    doc.fontSize(14).text(`Total Income: $${totalIncome}`);
    doc.text(`Total Expenses: $${totalExpenses}`);
    doc.text(`Total Investments: $${totalInvestments}`);
    doc.text(`Net Savings: $${netSavings}`);
    doc.moveDown(2);

    doc.fontSize(16).text("Transactions:", { underline: true });
    transactions.forEach((t) => {
      doc
        .fontSize(12)
        .text(
          `${t.date.toDateString()} - ${t.type} - ${t.category} - $${t.amount}`
        );
    });

    doc.moveDown(2);
    doc.fontSize(10).text("Generated by AI Financial Assistant", {
      align: "center",
    });

    doc.end();
  } catch (error) {
    console.error(error);
    res.status(500).json({ message: "Error generating report PDF" });
  }
};

function pickCategoryColor(category) {
  // same as yours
}

module.exports = { getMonthlyReport, generateMonthlyReport };
